--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated;
with PolyORB_HI.Marshallers_G;
pragma Elaborate_All (PolyORB_HI.Marshallers_G);

package body PolyORB_HI_Generated.Marshallers is

  --  Marshallers for interface type of thread enter_analyze.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.parking_enter_analyze_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    pragma Unreferenced
     (Message);
    pragma Unreferenced
     (Data);
  begin
    null;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.parking_enter_analyze_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.parking_enter_analyze_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    enter_camera_DATA : PolyORB_HI_Generated.Types.License_Plate;
    counter_number_DATA : PolyORB_HI_Generated.Types.Car_Counter;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.enter_camera)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (enter_camera_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.parking_enter_analyze_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.enter_camera,
          enter_camera_DATA => enter_camera_DATA);
    elsif (Port
      = PolyORB_HI_Generated.Activity.enter_plate)
    then
      Data :=
       PolyORB_HI_Generated.Activity.parking_enter_analyze_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.enter_plate);
    elsif (Port
      = PolyORB_HI_Generated.Activity.counter_number)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (counter_number_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.parking_enter_analyze_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.counter_number,
          counter_number_DATA => counter_number_DATA);
    end if;
  end Unmarshall;

  --  Marshallers for DATA type license_plate

  package License_Plate_Marshallers is
   new PolyORB_HI.Marshallers_G
     (PolyORB_HI_Generated.Types.License_Plate);

  procedure Marshall
   (Data : PolyORB_HI_Generated.Types.License_Plate;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames License_Plate_Marshallers.Marshall;

  procedure Unmarshall
   (Data : out PolyORB_HI_Generated.Types.License_Plate;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames License_Plate_Marshallers.Unmarshall;

  --  Marshallers for DATA type car_counter

  package Car_Counter_Marshallers is
   new PolyORB_HI.Marshallers_G
     (PolyORB_HI_Generated.Types.Car_Counter);

  procedure Marshall
   (Data : PolyORB_HI_Generated.Types.Car_Counter;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames Car_Counter_Marshallers.Marshall;

  procedure Unmarshall
   (Data : out PolyORB_HI_Generated.Types.Car_Counter;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames Car_Counter_Marshallers.Unmarshall;

  --  Marshallers for interface type of thread leave_analyze.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.parking_leave_analyze_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    pragma Unreferenced
     (Message);
    pragma Unreferenced
     (Data);
  begin
    null;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.parking_leave_analyze_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.parking_leave_analyze_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    leave_camera_DATA : PolyORB_HI_Generated.Types.License_Plate;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.leave_camera)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (leave_camera_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.parking_leave_analyze_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.leave_camera,
          leave_camera_DATA => leave_camera_DATA);
    elsif (Port
      = PolyORB_HI_Generated.Activity.leave_plate)
    then
      Data :=
       PolyORB_HI_Generated.Activity.parking_leave_analyze_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.leave_plate);
    elsif (Port
      = PolyORB_HI_Generated.Activity.payment)
    then
      Data :=
       PolyORB_HI_Generated.Activity.parking_leave_analyze_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.payment);
    end if;
  end Unmarshall;

  --  Marshallers for interface type of thread counter.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.parking_counter_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.counter_number)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.counter_number_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.parking_counter_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.parking_counter_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    pragma Unreferenced
     (Message);
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.vacated1)
    then
      Data :=
       PolyORB_HI_Generated.Activity.parking_counter_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.vacated1);
    elsif (Port
      = PolyORB_HI_Generated.Activity.vacated2)
    then
      Data :=
       PolyORB_HI_Generated.Activity.parking_counter_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.vacated2);
    elsif (Port
      = PolyORB_HI_Generated.Activity.vacated3)
    then
      Data :=
       PolyORB_HI_Generated.Activity.parking_counter_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.vacated3);
    elsif (Port
      = PolyORB_HI_Generated.Activity.increment_counter)
    then
      Data :=
       PolyORB_HI_Generated.Activity.parking_counter_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.increment_counter);
    end if;
  end Unmarshall;

end PolyORB_HI_Generated.Marshallers;
