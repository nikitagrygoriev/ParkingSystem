--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Port_Kinds;
with System;
with PolyORB_HI_Generated.Marshallers;
with PolyORB_HI_Generated.Transport;
with PolyORB_HI.Thread_Interrogators;
pragma Elaborate_All (PolyORB_HI.Thread_Interrogators);
with PolyORB_HI_Generated.Subprograms;

package body PolyORB_HI_Generated.Activity is

  --  BEGIN: Data types used by all instances of component enter_analyze.impl

  type parking_enter_analyze_impl_Integer_Array is
   array (parking_enter_analyze_impl_Port_Type)
     of Standard.Integer;

  type parking_enter_analyze_impl_Port_Kind_Array is
   array (parking_enter_analyze_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_1_Max_Port_Image_Size is
   Integer range 1 .. PolyORB_HI_Generated.Deployment.Max_Port_Image_Size;

  subtype UT_Activity_Main_parking_enter_analyze_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_enter_analyze_impl_Port_Image_Array is
   array (parking_enter_analyze_impl_Port_Type)
     of UT_Activity_Main_parking_enter_analyze_impl_Port_Image_Array_Component;

  type parking_enter_analyze_impl_Address_Array is
   array (parking_enter_analyze_impl_Port_Type)
     of System.Address;

  type parking_enter_analyze_impl_Overflow_Protocol_Array is
   array (parking_enter_analyze_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component enter_analyze.impl

  parking_enter_analyze_Port_Kinds : constant parking_enter_analyze_impl_Port_Kind_Array :=
   (enter_camera =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    enter_plate =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    open_enter =>
     PolyORB_HI.Port_Kinds.Out_Event_Port,
    counter_number =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    increment_counter =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  parking_enter_analyze_Port_Images : constant parking_enter_analyze_impl_Port_Image_Array :=
   (enter_camera =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_enter_analyze_enter_camera_K),
    enter_plate =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_enter_analyze_enter_plate_K),
    open_enter =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_enter_analyze_open_enter_K),
    counter_number =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_enter_analyze_counter_number_K),
    increment_counter =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_enter_analyze_increment_counter_K));

  parking_enter_analyze_FIFO_Sizes : constant parking_enter_analyze_impl_Integer_Array :=
   (enter_camera =>
     1,
    enter_plate =>
     16,
    open_enter =>
     -1,
    counter_number =>
     1,
    increment_counter =>
     -1);

  parking_enter_analyze_Offsets : constant parking_enter_analyze_impl_Integer_Array :=
   (enter_camera =>
     1,
    enter_plate =>
     2,
    open_enter =>
     0,
    counter_number =>
     18,
    increment_counter =>
     0);

  parking_enter_analyze_Overflow_Protocols : constant parking_enter_analyze_impl_Overflow_Protocol_Array :=
   (enter_camera =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    enter_plate =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    open_enter =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    counter_number =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    increment_counter =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_enter_analyze_Urgencies : constant parking_enter_analyze_impl_Integer_Array :=
   (enter_camera =>
     0,
    enter_plate =>
     0,
    open_enter =>
     0,
    counter_number =>
     0,
    increment_counter =>
     0);

  parking_enter_analyze_Total_FIFO_Size : constant Standard.Integer :=
   18;

  type UT_Activity_Main_enter_analyze_increment_counter_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  enter_analyze_increment_counter_Destinations : constant UT_Activity_Main_enter_analyze_increment_counter_Destinations_Array :=
   UT_Activity_Main_enter_analyze_increment_counter_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.main_counter_increment_counter_K);

  parking_enter_analyze_N_Destinations : constant parking_enter_analyze_impl_Integer_Array :=
   (enter_camera =>
     0,
    enter_plate =>
     0,
    open_enter =>
     0,
    counter_number =>
     0,
    increment_counter =>
     1);

  enter_analyze_Destinations : constant parking_enter_analyze_impl_Address_Array :=
   (enter_camera =>
     System.null_Address,
    enter_plate =>
     System.null_Address,
    open_enter =>
     System.null_Address,
    counter_number =>
     System.null_Address,
    increment_counter =>
     enter_analyze_increment_counter_Destinations'Address);

  package parking_enter_analyze_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_enter_analyze_impl_Port_Type,
      Integer_Array => parking_enter_analyze_impl_Integer_Array,
      Port_Kind_Array => parking_enter_analyze_impl_Port_Kind_Array,
      Port_Image_Array => parking_enter_analyze_impl_Port_Image_Array,
      Address_Array => parking_enter_analyze_impl_Address_Array,
      Overflow_Protocol_Array => parking_enter_analyze_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_enter_analyze_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_enter_analyze_K,
      Thread_Port_Kinds => parking_enter_analyze_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_enter_analyze_Port_Images,
      Thread_Fifo_Sizes => parking_enter_analyze_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_enter_analyze_Offsets,
      Thread_Overflow_Protocols => parking_enter_analyze_Overflow_Protocols,
      Urgencies => parking_enter_analyze_Urgencies,
      Global_Data_Queue_Size => parking_enter_analyze_Total_FIFO_Size,
      N_Destinations => parking_enter_analyze_N_Destinations,
      Destinations => enter_analyze_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_enter_analyze_Task.Next_Deadline);

  --  Periodic task : enter_analyze

  -------------------------------
  -- parking_enter_analyze_Job -- 
  -------------------------------

  function parking_enter_analyze_Job return PolyORB_HI.Errors.Error_Kind is
    enter_camera_V : PolyORB_HI_Generated.Types.License_Plate;
    counter_number_V : PolyORB_HI_Generated.Types.Car_Counter;
    Error_Ü : constant PolyORB_HI.Errors.Error_Kind :=
     PolyORB_HI.Errors.Error_None;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (parking_enter_analyze_Interrogators.Get_Count
     (enter_camera)
      /= -1)
    then
      enter_camera_V :=
       parking_enter_analyze_Interrogators.Get_Value
         (enter_camera).enter_camera_DATA;
    else
      enter_camera_V :=
       PolyORB_HI_Generated.Types.License_Plate_Default_Value;
    end if;
    if (parking_enter_analyze_Interrogators.Get_Count
     (counter_number)
      /= -1)
    then
      counter_number_V :=
       parking_enter_analyze_Interrogators.Get_Value
         (counter_number).counter_number_DATA;
    else
      counter_number_V :=
       PolyORB_HI_Generated.Types.Car_Counter_Default_Value;
    end if;
    --  Dequeue the IN port values
    parking_enter_analyze_Interrogators.Next_Value
     (parking_enter_analyze_impl_Port_Type'
       (enter_plate));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_enter_analyze_spg;
    --  Return error code
    return Error_Ü;
  end parking_enter_analyze_Job;

  --  BEGIN: Data types used by all instances of component leave_analyze.impl

  type parking_leave_analyze_impl_Integer_Array is
   array (parking_leave_analyze_impl_Port_Type)
     of Standard.Integer;

  type parking_leave_analyze_impl_Port_Kind_Array is
   array (parking_leave_analyze_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_leave_analyze_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_leave_analyze_impl_Port_Image_Array is
   array (parking_leave_analyze_impl_Port_Type)
     of UT_Activity_Main_parking_leave_analyze_impl_Port_Image_Array_Component;

  type parking_leave_analyze_impl_Address_Array is
   array (parking_leave_analyze_impl_Port_Type)
     of System.Address;

  type parking_leave_analyze_impl_Overflow_Protocol_Array is
   array (parking_leave_analyze_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component leave_analyze.impl

  parking_leave_analyze_Port_Kinds : constant parking_leave_analyze_impl_Port_Kind_Array :=
   (leave_camera =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    leave_plate =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    payment =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    open_leave =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  parking_leave_analyze_Port_Images : constant parking_leave_analyze_impl_Port_Image_Array :=
   (leave_camera =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_leave_analyze_leave_camera_K),
    leave_plate =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_leave_analyze_leave_plate_K),
    payment =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_leave_analyze_payment_K),
    open_leave =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_leave_analyze_open_leave_K));

  parking_leave_analyze_FIFO_Sizes : constant parking_leave_analyze_impl_Integer_Array :=
   (leave_camera =>
     1,
    leave_plate =>
     16,
    payment =>
     16,
    open_leave =>
     -1);

  parking_leave_analyze_Offsets : constant parking_leave_analyze_impl_Integer_Array :=
   (leave_camera =>
     1,
    leave_plate =>
     2,
    payment =>
     18,
    open_leave =>
     0);

  parking_leave_analyze_Overflow_Protocols : constant parking_leave_analyze_impl_Overflow_Protocol_Array :=
   (leave_camera =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    leave_plate =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    payment =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    open_leave =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_leave_analyze_Urgencies : constant parking_leave_analyze_impl_Integer_Array :=
   (leave_camera =>
     0,
    leave_plate =>
     0,
    payment =>
     0,
    open_leave =>
     0);

  parking_leave_analyze_Total_FIFO_Size : constant Standard.Integer :=
   33;

  parking_leave_analyze_N_Destinations : constant parking_leave_analyze_impl_Integer_Array :=
   (leave_camera =>
     0,
    leave_plate =>
     0,
    payment =>
     0,
    open_leave =>
     0);

  leave_analyze_Destinations : constant parking_leave_analyze_impl_Address_Array :=
   (leave_camera =>
     System.null_Address,
    leave_plate =>
     System.null_Address,
    payment =>
     System.null_Address,
    open_leave =>
     System.null_Address);

  package parking_leave_analyze_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_leave_analyze_impl_Port_Type,
      Integer_Array => parking_leave_analyze_impl_Integer_Array,
      Port_Kind_Array => parking_leave_analyze_impl_Port_Kind_Array,
      Port_Image_Array => parking_leave_analyze_impl_Port_Image_Array,
      Address_Array => parking_leave_analyze_impl_Address_Array,
      Overflow_Protocol_Array => parking_leave_analyze_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_leave_analyze_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_leave_analyze_K,
      Thread_Port_Kinds => parking_leave_analyze_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_leave_analyze_Port_Images,
      Thread_Fifo_Sizes => parking_leave_analyze_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_leave_analyze_Offsets,
      Thread_Overflow_Protocols => parking_leave_analyze_Overflow_Protocols,
      Urgencies => parking_leave_analyze_Urgencies,
      Global_Data_Queue_Size => parking_leave_analyze_Total_FIFO_Size,
      N_Destinations => parking_leave_analyze_N_Destinations,
      Destinations => leave_analyze_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_leave_analyze_Task.Next_Deadline);

  --  Periodic task : leave_analyze

  -------------------------------
  -- parking_leave_analyze_Job -- 
  -------------------------------

  function parking_leave_analyze_Job return PolyORB_HI.Errors.Error_Kind is
    leave_camera_V : PolyORB_HI_Generated.Types.License_Plate;
    Error_Ü : constant PolyORB_HI.Errors.Error_Kind :=
     PolyORB_HI.Errors.Error_None;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (parking_leave_analyze_Interrogators.Get_Count
     (leave_camera)
      /= -1)
    then
      leave_camera_V :=
       parking_leave_analyze_Interrogators.Get_Value
         (leave_camera).leave_camera_DATA;
    else
      leave_camera_V :=
       PolyORB_HI_Generated.Types.License_Plate_Default_Value;
    end if;
    --  Dequeue the IN port values
    parking_leave_analyze_Interrogators.Next_Value
     (parking_leave_analyze_impl_Port_Type'
       (leave_plate));
    parking_leave_analyze_Interrogators.Next_Value
     (parking_leave_analyze_impl_Port_Type'
       (payment));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_leave_analyze_spg;
    --  Return error code
    return Error_Ü;
  end parking_leave_analyze_Job;

  --  BEGIN: Data types used by all instances of component counter.impl

  type parking_counter_impl_Integer_Array is
   array (parking_counter_impl_Port_Type)
     of Standard.Integer;

  type parking_counter_impl_Port_Kind_Array is
   array (parking_counter_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_Main_parking_counter_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_Main_1_Max_Port_Image_Size);

  type parking_counter_impl_Port_Image_Array is
   array (parking_counter_impl_Port_Type)
     of UT_Activity_Main_parking_counter_impl_Port_Image_Array_Component;

  type parking_counter_impl_Address_Array is
   array (parking_counter_impl_Port_Type)
     of System.Address;

  type parking_counter_impl_Overflow_Protocol_Array is
   array (parking_counter_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component counter.impl

  parking_counter_Port_Kinds : constant parking_counter_impl_Port_Kind_Array :=
   (counter_number =>
     PolyORB_HI.Port_Kinds.Out_Data_Port,
    vacated1 =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    vacated2 =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    vacated3 =>
     PolyORB_HI.Port_Kinds.In_Event_Port,
    increment_counter =>
     PolyORB_HI.Port_Kinds.In_Event_Port);

  parking_counter_Port_Images : constant parking_counter_impl_Port_Image_Array :=
   (counter_number =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_counter_counter_number_K),
    vacated1 =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_counter_vacated1_K),
    vacated2 =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_counter_vacated2_K),
    vacated3 =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_counter_vacated3_K),
    increment_counter =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.main_counter_increment_counter_K));

  parking_counter_FIFO_Sizes : constant parking_counter_impl_Integer_Array :=
   (counter_number =>
     -1,
    vacated1 =>
     16,
    vacated2 =>
     16,
    vacated3 =>
     16,
    increment_counter =>
     16);

  parking_counter_Offsets : constant parking_counter_impl_Integer_Array :=
   (counter_number =>
     0,
    vacated1 =>
     1,
    vacated2 =>
     17,
    vacated3 =>
     33,
    increment_counter =>
     49);

  parking_counter_Overflow_Protocols : constant parking_counter_impl_Overflow_Protocol_Array :=
   (counter_number =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    vacated1 =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    vacated2 =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    vacated3 =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    increment_counter =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  parking_counter_Urgencies : constant parking_counter_impl_Integer_Array :=
   (counter_number =>
     0,
    vacated1 =>
     0,
    vacated2 =>
     0,
    vacated3 =>
     0,
    increment_counter =>
     0);

  parking_counter_Total_FIFO_Size : constant Standard.Integer :=
   64;

  type UT_Activity_Main_counter_counter_number_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  counter_counter_number_Destinations : constant UT_Activity_Main_counter_counter_number_Destinations_Array :=
   UT_Activity_Main_counter_counter_number_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.main_enter_analyze_counter_number_K);

  parking_counter_N_Destinations : constant parking_counter_impl_Integer_Array :=
   (counter_number =>
     1,
    vacated1 =>
     0,
    vacated2 =>
     0,
    vacated3 =>
     0,
    increment_counter =>
     0);

  counter_Destinations : constant parking_counter_impl_Address_Array :=
   (counter_number =>
     counter_counter_number_Destinations'Address,
    vacated1 =>
     System.null_Address,
    vacated2 =>
     System.null_Address,
    vacated3 =>
     System.null_Address,
    increment_counter =>
     System.null_Address);

  package parking_counter_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => parking_counter_impl_Port_Type,
      Integer_Array => parking_counter_impl_Integer_Array,
      Port_Kind_Array => parking_counter_impl_Port_Kind_Array,
      Port_Image_Array => parking_counter_impl_Port_Image_Array,
      Address_Array => parking_counter_impl_Address_Array,
      Overflow_Protocol_Array => parking_counter_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => parking_counter_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.main_counter_K,
      Thread_Port_Kinds => parking_counter_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => parking_counter_Port_Images,
      Thread_Fifo_Sizes => parking_counter_FIFO_Sizes,
      Thread_Fifo_Offsets => parking_counter_Offsets,
      Thread_Overflow_Protocols => parking_counter_Overflow_Protocols,
      Urgencies => parking_counter_Urgencies,
      Global_Data_Queue_Size => parking_counter_Total_FIFO_Size,
      N_Destinations => parking_counter_N_Destinations,
      Destinations => counter_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => parking_counter_Task.Next_Deadline);

  --  Periodic task : counter

  -------------------------
  -- parking_counter_Job -- 
  -------------------------

  function parking_counter_Job return PolyORB_HI.Errors.Error_Kind is
    Error_Ü : constant PolyORB_HI.Errors.Error_Kind :=
     PolyORB_HI.Errors.Error_None;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    --  Dequeue the IN port values
    parking_counter_Interrogators.Next_Value
     (parking_counter_impl_Port_Type'
       (vacated1));
    parking_counter_Interrogators.Next_Value
     (parking_counter_impl_Port_Type'
       (vacated2));
    parking_counter_Interrogators.Next_Value
     (parking_counter_impl_Port_Type'
       (vacated3));
    parking_counter_Interrogators.Next_Value
     (parking_counter_impl_Port_Type'
       (increment_counter));
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.parking_counter_spg;
    --  Return error code
    return Error_Ü;
  end parking_counter_Job;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_enter_analyze_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_enter_analyze_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_enter_analyze_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_enter_analyze_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return parking_enter_analyze_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_enter_analyze_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_enter_analyze_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_enter_analyze_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_enter_analyze_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_enter_analyze_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_enter_analyze_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_enter_analyze_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_enter_analyze_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_enter_analyze_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_leave_analyze_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_leave_analyze_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_leave_analyze_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_leave_analyze_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return parking_leave_analyze_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_leave_analyze_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_leave_analyze_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_leave_analyze_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_leave_analyze_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_leave_analyze_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_leave_analyze_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_leave_analyze_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_leave_analyze_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_leave_analyze_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return parking_counter_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_counter_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_counter_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_counter_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return parking_counter_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_counter_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_counter_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_counter_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return parking_counter_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_counter_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_counter_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_counter_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_counter_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    parking_counter_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

end PolyORB_HI_Generated.Activity;
