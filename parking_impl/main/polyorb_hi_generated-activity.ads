--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated.Types;
with PolyORB_HI.Errors;
with PolyORB_HI_Generated.Deployment;
with Ada.Real_Time;
with PolyORB_HI.Periodic_Task;
pragma Elaborate_All (PolyORB_HI.Periodic_Task);

package PolyORB_HI_Generated.Activity is

  --  BEGIN: Entities used by all instances of component enter_analyze.impl

  type parking_enter_analyze_impl_Port_Type is
   (enter_camera,
    enter_plate,
    open_enter,
    counter_number,
    increment_counter);

  type parking_enter_analyze_impl_Interface 
   (Port : parking_enter_analyze_impl_Port_Type := parking_enter_analyze_impl_Port_Type'First)
  is
    record
      case Port is
        when enter_camera =>
          enter_camera_DATA : PolyORB_HI_Generated.Types.License_Plate;
        when enter_plate =>
          null;
        when open_enter =>
          null;
        when counter_number =>
          counter_number_DATA : PolyORB_HI_Generated.Types.Car_Counter;
        when increment_counter =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_enter_analyze_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return parking_enter_analyze_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_enter_analyze_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_enter_analyze_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_enter_analyze_impl_Port_Type);

  --  END: Entities used by all instances of component enter_analyze.impl

  --  Periodic task : enter_analyze

  function parking_enter_analyze_Job return PolyORB_HI.Errors.Error_Kind;

  package parking_enter_analyze_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_enter_analyze_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (50),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (50),
      Task_Priority => 71,
      Task_Stack_Size => 100000,
      Job => parking_enter_analyze_Job);

  --  BEGIN: Entities used by all instances of component leave_analyze.impl

  type parking_leave_analyze_impl_Port_Type is
   (leave_camera,
    leave_plate,
    payment,
    open_leave);

  type parking_leave_analyze_impl_Interface 
   (Port : parking_leave_analyze_impl_Port_Type := parking_leave_analyze_impl_Port_Type'First)
  is
    record
      case Port is
        when leave_camera =>
          leave_camera_DATA : PolyORB_HI_Generated.Types.License_Plate;
        when leave_plate =>
          null;
        when payment =>
          null;
        when open_leave =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_leave_analyze_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return parking_leave_analyze_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_leave_analyze_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_leave_analyze_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_leave_analyze_impl_Port_Type);

  --  END: Entities used by all instances of component leave_analyze.impl

  --  Periodic task : leave_analyze

  function parking_leave_analyze_Job return PolyORB_HI.Errors.Error_Kind;

  package parking_leave_analyze_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_leave_analyze_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (50),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (50),
      Task_Priority => 70,
      Task_Stack_Size => 100000,
      Job => parking_leave_analyze_Job);

  --  BEGIN: Entities used by all instances of component counter.impl

  type parking_counter_impl_Port_Type is
   (counter_number,
    vacated1,
    vacated2,
    vacated3,
    increment_counter);

  type parking_counter_impl_Interface 
   (Port : parking_counter_impl_Port_Type := parking_counter_impl_Port_Type'First)
  is
    record
      case Port is
        when counter_number =>
          counter_number_DATA : PolyORB_HI_Generated.Types.Car_Counter;
        when vacated1 =>
          null;
        when vacated2 =>
          null;
        when vacated3 =>
          null;
        when increment_counter =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_counter_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return parking_counter_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : parking_counter_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : parking_counter_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out parking_counter_impl_Port_Type);

  --  END: Entities used by all instances of component counter.impl

  --  Periodic task : counter

  function parking_counter_Job return PolyORB_HI.Errors.Error_Kind;

  package parking_counter_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.main_counter_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (50),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (50),
      Task_Priority => 72,
      Task_Stack_Size => 100000,
      Job => parking_counter_Job);

end PolyORB_HI_Generated.Activity;
