--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with Interfaces;
with PolyORB_HI.Port_Type_Marshallers;
with PolyORB_HI.Utils;
with PolyORB_HI_Generated.Activity;
use PolyORB_HI_Generated.Activity;
with Ada.Real_Time;
with PolyORB_HI.Time_Marshallers;
with PolyORB_HI_Generated.Marshallers;

package body PolyORB_HI_Generated.Transport is

  procedure parking_enter_analyze_Deliver
   (Port : PolyORB_HI_Generated.Deployment.Port_Type;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Msg : in out PolyORB_HI.Messages.Message_Type);

  procedure parking_leave_analyze_Deliver
   (Port : PolyORB_HI_Generated.Deployment.Port_Type;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Msg : in out PolyORB_HI.Messages.Message_Type);

  procedure parking_counter_Deliver
   (Port : PolyORB_HI_Generated.Deployment.Port_Type;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Msg : in out PolyORB_HI.Messages.Message_Type);

  -------------
  -- Deliver -- 
  -------------

  procedure Deliver
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Message : PolyORB_HI.Streams.Stream_Element_Array)
  is
    use PolyORB_HI_Generated.Deployment;
    Msg : PolyORB_HI.Messages.Message_Type;
    Value : Interfaces.Unsigned_16;
    Port : PolyORB_HI_Generated.Deployment.Port_Type;
    use type PolyORB_HI.Streams.Stream_Element_Offset;
  begin
    PolyORB_HI.Messages.Write
     (Msg,
      Message
       ((Message'First
          + PolyORB_HI.Messages.Header_Size) .. Message'Last));
    PolyORB_HI.Port_Type_Marshallers.Unmarshall
     (Value,
      Msg);
    Port :=
     PolyORB_HI.Utils.Corresponding_Port
       (Value);
    if (Entity
      = PolyORB_HI_Generated.Deployment.main_enter_analyze_K)
    then
      parking_enter_analyze_Deliver
       (Port,
        PolyORB_HI.Messages.Sender
         (Message),
        Msg);
    elsif (Entity
      = PolyORB_HI_Generated.Deployment.main_leave_analyze_K)
    then
      parking_leave_analyze_Deliver
       (Port,
        PolyORB_HI.Messages.Sender
         (Message),
        Msg);
    elsif (Entity
      = PolyORB_HI_Generated.Deployment.main_counter_K)
    then
      parking_counter_Deliver
       (Port,
        PolyORB_HI.Messages.Sender
         (Message),
        Msg);
    end if;
  end Deliver;

  function parking_enter_analyze_Send
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Message : PolyORB_HI.Streams.Stream_Element_Array)
   return PolyORB_HI.Errors.Error_Kind;

  function parking_leave_analyze_Send
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Message : PolyORB_HI.Streams.Stream_Element_Array)
   return PolyORB_HI.Errors.Error_Kind;

  function parking_counter_Send
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Message : PolyORB_HI.Streams.Stream_Element_Array)
   return PolyORB_HI.Errors.Error_Kind;

  ----------
  -- Send -- 
  ----------

  function Send
   (From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Message : PolyORB_HI.Messages.Message_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    Msg : constant PolyORB_HI.Streams.Stream_Element_Array :=
     PolyORB_HI.Messages.Encapsulate
       (Message,
        From,
        Entity);
  begin
    if (From
      = PolyORB_HI_Generated.Deployment.main_enter_analyze_K)
    then
      return parking_enter_analyze_Send
       (Entity,
        Msg);
    elsif (From
      = PolyORB_HI_Generated.Deployment.main_leave_analyze_K)
    then
      return parking_leave_analyze_Send
       (Entity,
        Msg);
    elsif (From
      = PolyORB_HI_Generated.Deployment.main_counter_K)
    then
      return parking_counter_Send
       (Entity,
        Msg);
    else
      return PolyORB_HI.Errors.Error_Kind'
       (PolyORB_HI.Errors.Error_Transport);
    end if;
  end Send;

  -----------------------------------
  -- parking_enter_analyze_Deliver -- 
  -----------------------------------

  procedure parking_enter_analyze_Deliver
   (Port : PolyORB_HI_Generated.Deployment.Port_Type;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Msg : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    Thread_Interface_Ü : parking_enter_analyze_impl_Interface;
    Time_Stamp_Ü : Ada.Real_Time.Time;
  begin
    if (Port
      = PolyORB_HI_Generated.Deployment.main_enter_analyze_enter_camera_K)
    then
      PolyORB_HI.Time_Marshallers.Unmarshall
       (Time_Stamp_Ü,
        Msg);
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (enter_camera,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_enter_analyze_K,
        Thread_Interface_Ü,
        From,
        Time_Stamp_Ü);
    elsif (Port
      = PolyORB_HI_Generated.Deployment.main_enter_analyze_enter_plate_K)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (enter_plate,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_enter_analyze_K,
        Thread_Interface_Ü,
        From);
    elsif (Port
      = PolyORB_HI_Generated.Deployment.main_enter_analyze_counter_number_K)
    then
      PolyORB_HI.Time_Marshallers.Unmarshall
       (Time_Stamp_Ü,
        Msg);
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (counter_number,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_enter_analyze_K,
        Thread_Interface_Ü,
        From,
        Time_Stamp_Ü);
    end if;
  end parking_enter_analyze_Deliver;

  --------------------------------
  -- parking_enter_analyze_Send -- 
  --------------------------------

  function parking_enter_analyze_Send
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Message : PolyORB_HI.Streams.Stream_Element_Array)
   return PolyORB_HI.Errors.Error_Kind
  is
    pragma Warnings
     (Off,
      Message);
    pragma Warnings
     (Off,
      Entity);
    use PolyORB_HI_Generated.Deployment;
  begin
    --  Device
    if (Entity
      = PolyORB_HI_Generated.Deployment.main_counter_K)
    then
      Deliver
       (Entity,
        Message);
      return PolyORB_HI.Errors.Error_Kind'
       (PolyORB_HI.Errors.Error_None);
    else
      return PolyORB_HI.Errors.Error_Kind'
       (PolyORB_HI.Errors.Error_Transport);
    end if;
  end parking_enter_analyze_Send;

  -----------------------------------
  -- parking_leave_analyze_Deliver -- 
  -----------------------------------

  procedure parking_leave_analyze_Deliver
   (Port : PolyORB_HI_Generated.Deployment.Port_Type;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Msg : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    Thread_Interface_Ü : parking_leave_analyze_impl_Interface;
    Time_Stamp_Ü : Ada.Real_Time.Time;
  begin
    if (Port
      = PolyORB_HI_Generated.Deployment.main_leave_analyze_leave_camera_K)
    then
      PolyORB_HI.Time_Marshallers.Unmarshall
       (Time_Stamp_Ü,
        Msg);
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (leave_camera,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_leave_analyze_K,
        Thread_Interface_Ü,
        From,
        Time_Stamp_Ü);
    elsif (Port
      = PolyORB_HI_Generated.Deployment.main_leave_analyze_leave_plate_K)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (leave_plate,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_leave_analyze_K,
        Thread_Interface_Ü,
        From);
    elsif (Port
      = PolyORB_HI_Generated.Deployment.main_leave_analyze_payment_K)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (payment,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_leave_analyze_K,
        Thread_Interface_Ü,
        From);
    end if;
  end parking_leave_analyze_Deliver;

  --------------------------------
  -- parking_leave_analyze_Send -- 
  --------------------------------

  function parking_leave_analyze_Send
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Message : PolyORB_HI.Streams.Stream_Element_Array)
   return PolyORB_HI.Errors.Error_Kind
  is
    pragma Warnings
     (Off,
      Message);
    pragma Warnings
     (Off,
      Entity);
  begin
    --  Device
    return PolyORB_HI.Errors.Error_Kind'
     (PolyORB_HI.Errors.Error_Transport);
  end parking_leave_analyze_Send;

  -----------------------------
  -- parking_counter_Deliver -- 
  -----------------------------

  procedure parking_counter_Deliver
   (Port : PolyORB_HI_Generated.Deployment.Port_Type;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Msg : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    Thread_Interface_Ü : parking_counter_impl_Interface;
  begin
    if (Port
      = PolyORB_HI_Generated.Deployment.main_counter_vacated1_K)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (vacated1,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_counter_K,
        Thread_Interface_Ü,
        From);
    elsif (Port
      = PolyORB_HI_Generated.Deployment.main_counter_vacated2_K)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (vacated2,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_counter_K,
        Thread_Interface_Ü,
        From);
    elsif (Port
      = PolyORB_HI_Generated.Deployment.main_counter_vacated3_K)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (vacated3,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_counter_K,
        Thread_Interface_Ü,
        From);
    elsif (Port
      = PolyORB_HI_Generated.Deployment.main_counter_increment_counter_K)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (increment_counter,
        Thread_Interface_Ü,
        Msg);
      PolyORB_HI_Generated.Activity.Store_Received_Message
       (PolyORB_HI_Generated.Deployment.main_counter_K,
        Thread_Interface_Ü,
        From);
    end if;
  end parking_counter_Deliver;

  --------------------------
  -- parking_counter_Send -- 
  --------------------------

  function parking_counter_Send
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Message : PolyORB_HI.Streams.Stream_Element_Array)
   return PolyORB_HI.Errors.Error_Kind
  is
    pragma Warnings
     (Off,
      Message);
    pragma Warnings
     (Off,
      Entity);
    use PolyORB_HI_Generated.Deployment;
  begin
    if (Entity
      = PolyORB_HI_Generated.Deployment.main_enter_analyze_K)
    then
      Deliver
       (Entity,
        Message);
      return PolyORB_HI.Errors.Error_Kind'
       (PolyORB_HI.Errors.Error_None);
    else
      return PolyORB_HI.Errors.Error_Kind'
       (PolyORB_HI.Errors.Error_Transport);
    end if;
  end parking_counter_Send;

end PolyORB_HI_Generated.Transport;
